import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect } from "react";
import { trpc } from "../utils/trpc";
import { useForm, Resolver } from "react-hook-form";
import { ErrorMessage } from "@hookform/error-message";
import { MdUploadFile as UploadFileIcon } from "react-icons/md";
import { MdCached as ProcessingIcon } from "react-icons/md";
import { MdAddLink as LinkIcon } from "react-icons/md";
import { z } from "zod";

type FormValues = {
  url: string;
  files: FileList;
};

const schema = z.object({
  url: z.string(),
  files: z
    .any()
    .refine((files: FileList) => {
      // files
      for (let i = 0; i < files.length; i++) {
        if (!".txt".includes(files.item(i)!.type)) {
          return false;
        }
      }
      return true;
    }, "Only plain text files are accepted")
    .optional(),
});

const resolver: Resolver<FormValues> = async (values) => {
  return { values, errors: "1" };
};

const Home: NextPage = () => {
  // const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
  } = useForm<FormValues>();
  const [isUsingBatch, setIsUsingBatch] = React.useState(false);
  const files = watch("files");
  React.useEffect(() => {
    console.log(files);
    if (files?.length) {
      setIsUsingBatch(true);
    } else {
      setIsUsingBatch(false);
    }
  }, [files]);
  // const { ref: refFiles } = register("files");
  // console.log(typeof refFiles.);
  // } = useForm({ resolver });
  // const onSubmit: Resolver<{url: string, file: FileList}> = (data) =>
  const onSubmit = (data: FormValues) => {
    console.log("data", data);
    if (!isUsingBatch) {
      fetch(data.url)
        .then((res) => {
          return res.text();
        })
        .then((html) => {
          console.log(html);
        })
        .catch((err) => console.warn(err));
    } else {
      console.log(data.files);
      for (let i = 0; i < files.length; i++) {
        if (!".txt".includes(files.item(i)!.type)) {
          console.log("Its not a text plain file");
          return;
          // return false;
        }
      }
      console.log("its a text file");
    }
  };
  // console.log(watch("url")); // watch input value by passing the name of it
  return (
    <>
      <Head>
        <title>Digital Certificates Trust Verifier</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center min-h-screen px-8 gap-4">
        <h1 className="text-4xl lg:text-6xl leading-normal font-extrabold w-full py-8">
          <p>Digital Certificates</p>
          <p>Trust Verifier</p>
        </h1>

        <form
          onSubmit={handleSubmit(onSubmit)}
          className="flex flex-col lg:flex-row gap-4 w-full justify-center"
        >
          <div className="w-full relative">
            <span
              className={`absolute inset-y-0 lg:top-3 ${
                errors.url && "bottom-6 lg:bottom-0"
              } left-0 flex lg:block items-center pl-2 text-gray-500`}
            >
              <i className="text-xl">
                <LinkIcon />
              </i>
            </span>
            <input
              type="url"
              disabled={isUsingBatch}
              placeholder="Type URL ..."
              className={`placeholder:italic placeholder:text-gray-500 rounded py-2 px-3 border text-gray-500 w-full focus:outline-none focus:ring-1 focus:border-sky-500 focus:ring-sky-500 pl-8 ${
                errors.url &&
                "focus:border-red-400 focus:ring-red-400 border-red-400"
              }`}
              {...register("url", {
                required: {
                  value: isUsingBatch ? false : true,
                  message: "URLs are required",
                },
                pattern: {
                  value:
                    /[(http(s)?):\/\/(www\.)?a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/,
                  message: "Please enter a valid URL",
                },
              })}
            />
            <ErrorMessage
              errors={errors}
              name="url"
              render={({ message }) => (
                <span className="text-sm text-red-400">{message}</span>
              )}
            />
          </div>
          {/* {errors.url && <span>{errors.url.message}</span>} */}
          {/* <input type="file" disabled /> */}
          <div className="flex w-full lg:w-[40rem] items-start gap-4 justify-between">
            <label className="flex cursor-pointer w-full flex-col">
              <input
                type="file"
                className="file:hidden order-2 text-gray-400 max-w-[12rem] text-sm"
                accept="text/plain, .md"
                multiple
                {...register("files", { required: false })}
              />
              <div className="bg-gray-700 hover:bg-gray-600 font-semibold border border-gray-500 py-2 px-4 rounded  w-full flex items-center">
                <i className="text-xl">
                  <UploadFileIcon />
                </i>
                <p className="px-4">Load Batch</p>
              </div>
            </label>
            <button
              type="submit"
              className="bg-gray-700 hover:bg-gray-600 font-semibold py-2 px-4 border border-gray-500 rounded w-full flex items-center justify-start"
            >
              <i className="text-xl">
                <ProcessingIcon />
              </i>
              <p className="px-4">Verify URLs</p>
            </button>
          </div>
        </form>
        <div className="flex flex-col gap-4">
          <div className="p-4 rounded bg-gray-600">
            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quae ut
            nisi in, sint aliquam ipsa placeat totam itaque ipsam, maiores
            assumenda quidem laborum hic, provident beatae perferendis eius.
            Est, facilis.
          </div>
          <div className="p-4 rounded bg-gray-600">
            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quae ut
            nisi in, sint aliquam ipsa placeat totam itaque ipsam, maiores
            assumenda quidem laborum hic, provident beatae perferendis eius.
            Est, facilis.
          </div>
          <div className="p-4 rounded bg-gray-600">
            Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quae ut
            nisi in, sint aliquam ipsa placeat totam itaque ipsam, maiores
            assumenda quidem laborum hic, provident beatae perferendis eius.
            Est, facilis.
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
